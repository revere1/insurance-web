import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, NgModule } from '@angular/core';
import { ShareButtons, CONFIG } from '@ngx-share/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
import { faEllipsisH, faMinus } from '@fortawesome/free-solid-svg-icons';
import { CommonModule } from '@angular/common';
import { ShareButtonModule } from '@ngx-share/button';

var ShareButtonsComponent = (function () {
    function ShareButtonsComponent(share) {
        this.share = share;
        this.stateWorker$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(this.share.config.prop).length
        });
        this.theme = this.share.theme;
        this.showIcon = true;
        this.showText = false;
        this.showCount = false;
        this.size = 0;
        this.count = new EventEmitter();
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
    }
    Object.defineProperty(ShareButtonsComponent.prototype, "includedButtons", {
        set: function (includedButtons) {
            this.updateState({ includedButtons: includedButtons });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareButtonsComponent.prototype, "excludedButtons", {
        set: function (excludedButtons) {
            this.updateState({ excludedButtons: excludedButtons });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShareButtonsComponent.prototype, "shownButtons", {
        set: function (shownCount) {
            this.updateState({ shownCount: shownCount });
        },
        enumerable: true,
        configurable: true
    });
    ShareButtonsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.state$ = this.stateWorker$.pipe(map(function (state) {
            var includedButtons = state.includedButtons.length ? state.includedButtons : state.userButtons;
            var userButtons = includedButtons.filter(function (btn) { return state.excludedButtons.indexOf(btn) < 0; });
            var selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons: userButtons,
                selectedButtons: selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount
            };
        }));
        this.configSub$ = this.share.config$.subscribe(function (config) {
            var includedButtons = config.options.include.length ? config.options.include : Object.keys(config.prop);
            var userButtons = includedButtons.filter(function (btn) { return config.options.exclude.indexOf(btn) < 0; });
            _this.updateState({
                userButtons: userButtons,
                expanded: false
            });
        });
    };
    ShareButtonsComponent.prototype.updateState = function (state) {
        this.stateWorker$.next(Object.assign({}, this.stateWorker$.getValue(), state));
    };
    ShareButtonsComponent.prototype.ngOnDestroy = function () {
        if (this.configSub$) {
            this.configSub$.unsubscribe();
        }
    };
    return ShareButtonsComponent;
}());
ShareButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons',
                template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showCount]=\"showCount\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                (count)=\"count.emit($event)\"></share-button>\n  <div class=\"sb-button sb-{{theme}}\">\n    <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                   [expanded]=\"state.expanded\"\n                   [size]=\"(1 + size/20) * 14\"\n                   (toggle)=\"updateState({expanded: $event})\">\n    </expand-button>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
ShareButtonsComponent.ctorParameters = function () { return [
    { type: ShareButtons, },
]; };
ShareButtonsComponent.propDecorators = {
    "theme": [{ type: Input },],
    "includedButtons": [{ type: Input, args: ['include',] },],
    "excludedButtons": [{ type: Input, args: ['exclude',] },],
    "shownButtons": [{ type: Input, args: ['show',] },],
    "url": [{ type: Input },],
    "title": [{ type: Input },],
    "description": [{ type: Input },],
    "image": [{ type: Input },],
    "tags": [{ type: Input },],
    "autoSetMeta": [{ type: Input },],
    "showIcon": [{ type: Input },],
    "showText": [{ type: Input },],
    "showCount": [{ type: Input },],
    "size": [{ type: Input },],
    "count": [{ type: Output },],
    "opened": [{ type: Output },],
    "closed": [{ type: Output },],
};
var ExpandButtonComponent = (function () {
    function ExpandButtonComponent(el) {
        this.icon = {
            true: faMinus,
            false: faEllipsisH
        };
        this.toggle = new EventEmitter();
        el.nativeElement.style.setProperty('--button-color', '#FF6651');
    }
    return ExpandButtonComponent;
}());
ExpandButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'expand-button',
                template: "\n    <button class=\"sb-wrapper sb-expand sb-show-icon\"\n            [style.fontSize.px]=\"size\"\n            (click)=\"toggle.emit(!expanded)\">\n      <div class=\"sb-inner\">\n        <div class=\"sb-content\">\n          <div class=\"sb-icon\">\n            <fa-icon [icon]=\"icon[expanded]\"></fa-icon>\n          </div>\n        </div>\n      </div>\n    </button>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
ExpandButtonComponent.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
ExpandButtonComponent.propDecorators = {
    "expanded": [{ type: Input },],
    "size": [{ type: Input },],
    "toggle": [{ type: Output },],
};
function ShareButtonsFactory(config) {
    return new ShareButtons(config);
}
var ShareButtonsModule = (function () {
    function ShareButtonsModule() {
    }
    ShareButtonsModule.forRoot = function (config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [
                { provide: CONFIG, useValue: config },
                {
                    provide: ShareButtons,
                    useFactory: ShareButtonsFactory,
                    deps: [CONFIG]
                }
            ]
        };
    };
    return ShareButtonsModule;
}());
ShareButtonsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButtonsComponent,
                    ExpandButtonComponent
                ],
                imports: [
                    ShareButtonModule,
                    CommonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtonsComponent
                ]
            },] },
];
ShareButtonsModule.ctorParameters = function () { return []; };

export { ShareButtonsFactory, ShareButtonsModule, ShareButtonsComponent, ExpandButtonComponent as Éµa };
//# sourceMappingURL=ngx-share-buttons.js.map
