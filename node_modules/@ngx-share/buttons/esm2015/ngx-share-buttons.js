import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, NgModule } from '@angular/core';
import { ShareButtons, CONFIG } from '@ngx-share/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { map } from 'rxjs/operators/map';
import { faEllipsisH, faMinus } from '@fortawesome/free-solid-svg-icons';
import { CommonModule } from '@angular/common';
import { ShareButtonModule } from '@ngx-share/button';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class ShareButtonsComponent {
    /**
     * @param {?} share
     */
    constructor(share) {
        this.share = share;
        this.stateWorker$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(this.share.config.prop).length
        });
        this.theme = this.share.theme;
        /**
         * Show buttons icon
         */
        this.showIcon = true;
        /**
         * Show buttons name
         */
        this.showText = false;
        /**
         * Show buttons share count
         */
        this.showCount = false;
        /**
         * Buttons size
         */
        this.size = 0;
        /**
         * Share count event
         */
        this.count = new EventEmitter();
        /**
         * Share dialog opened event
         */
        this.opened = new EventEmitter();
        /**
         * Share dialog closed event
         */
        this.closed = new EventEmitter();
    }
    /**
     * @param {?} includedButtons
     * @return {?}
     */
    set includedButtons(includedButtons) {
        this.updateState({ includedButtons });
    }
    /**
     * @param {?} excludedButtons
     * @return {?}
     */
    set excludedButtons(excludedButtons) {
        this.updateState({ excludedButtons });
    }
    /**
     * @param {?} shownCount
     * @return {?}
     */
    set shownButtons(shownCount) {
        this.updateState({ shownCount });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.state$ = this.stateWorker$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const /** @type {?} */ includedButtons = state.includedButtons.length ? state.includedButtons : state.userButtons;
            const /** @type {?} */ userButtons = includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0);
            const /** @type {?} */ selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount
            };
        }));
        /** Subscribe to share buttons config changes, This updates the component whenever a new button is added */
        this.configSub$ = this.share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const /** @type {?} */ includedButtons = config.options.include.length ? config.options.include : Object.keys(config.prop);
            const /** @type {?} */ userButtons = includedButtons.filter((btn) => config.options.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false
            });
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        this.stateWorker$.next(Object.assign({}, this.stateWorker$.getValue(), state));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.configSub$) {
            this.configSub$.unsubscribe();
        }
    }
}
ShareButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons',
                template: `<div *ngIf="state$ | async; let state" class="sb-group sb-{{theme}}">
  <share-button *ngFor="let button of state.selectedButtons"
                [button]="button"
                [theme]="theme"
                [url]="url"
                [title]="title"
                [description]="description"
                [image]="image"
                [tags]="tags"
                [autoSetMeta]="autoSetMeta"
                [showCount]="showCount"
                [showIcon]="showIcon"
                [showText]="showText"
                [size]="size"
                (opened)="opened.emit($event)"
                (closed)="closed.emit($event)"
                (count)="count.emit($event)"></share-button>
  <div class="sb-button sb-{{theme}}">
    <expand-button *ngIf="state.shownCount < state.userButtons.length"
                   [expanded]="state.expanded"
                   [size]="(1 + size/20) * 14"
                   (toggle)="updateState({expanded: $event})">
    </expand-button>
  </div>
</div>
`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
ShareButtonsComponent.ctorParameters = () => [
    { type: ShareButtons, },
];
ShareButtonsComponent.propDecorators = {
    "theme": [{ type: Input },],
    "includedButtons": [{ type: Input, args: ['include',] },],
    "excludedButtons": [{ type: Input, args: ['exclude',] },],
    "shownButtons": [{ type: Input, args: ['show',] },],
    "url": [{ type: Input },],
    "title": [{ type: Input },],
    "description": [{ type: Input },],
    "image": [{ type: Input },],
    "tags": [{ type: Input },],
    "autoSetMeta": [{ type: Input },],
    "showIcon": [{ type: Input },],
    "showText": [{ type: Input },],
    "showCount": [{ type: Input },],
    "size": [{ type: Input },],
    "count": [{ type: Output },],
    "opened": [{ type: Output },],
    "closed": [{ type: Output },],
};

/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]
 =====================================================================================
 Why do we use both include and exclude inputs?
 Because it is easier for users who want to disable one button to use [exclude] input instead of writing an array of all included buttons
 And it is easier for users who want to enable only one button to use [include] input instead of writing an array of all excluded buttons
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ExpandButtonComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.icon = {
            true: faMinus,
            false: faEllipsisH
        };
        this.toggle = new EventEmitter();
        el.nativeElement.style.setProperty('--button-color', '#FF6651');
    }
}
ExpandButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'expand-button',
                template: `
    <button class="sb-wrapper sb-expand sb-show-icon"
            [style.fontSize.px]="size"
            (click)="toggle.emit(!expanded)">
      <div class="sb-inner">
        <div class="sb-content">
          <div class="sb-icon">
            <fa-icon [icon]="icon[expanded]"></fa-icon>
          </div>
        </div>
      </div>
    </button>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
ExpandButtonComponent.ctorParameters = () => [
    { type: ElementRef, },
];
ExpandButtonComponent.propDecorators = {
    "expanded": [{ type: Input },],
    "size": [{ type: Input },],
    "toggle": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} config
 * @return {?}
 */
function ShareButtonsFactory(config) {
    return new ShareButtons(config);
}
class ShareButtonsModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [
                { provide: CONFIG, useValue: config },
                {
                    provide: ShareButtons,
                    useFactory: ShareButtonsFactory,
                    deps: [CONFIG]
                }
            ]
        };
    }
}
ShareButtonsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButtonsComponent,
                    ExpandButtonComponent
                ],
                imports: [
                    ShareButtonModule,
                    CommonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtonsComponent
                ]
            },] },
];
/** @nocollapse */
ShareButtonsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtonsFactory, ShareButtonsModule, ShareButtonsComponent, ExpandButtonComponent as Éµa };
//# sourceMappingURL=ngx-share-buttons.js.map
