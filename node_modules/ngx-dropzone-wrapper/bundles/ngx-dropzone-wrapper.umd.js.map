{"version":3,"file":"ngx-dropzone-wrapper.umd.js","sources":["../src/lib/dropzone.interfaces.ts","../src/lib/dropzone.directive.ts","../src/lib/dropzone.component.ts","../src/lib/dropzone.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const DROPZONE_CONFIG = new InjectionToken('DROPZONE_CONFIG');\n\nexport const DropzoneEvents = [\n  'error',\n  'success',\n  'sending',\n  'canceled',\n  'complete',\n  'processing',\n\n  'drop',\n  'dragStart',\n  'dragEnd',\n  'dragEnter',\n  'dragOver',\n  'dragLeave',\n\n  'thumbnail',\n  'addedFile',\n  'removedFile',\n  'uploadProgress',\n  'maxFilesReached',\n  'maxFilesExceeded',\n\n  'successMultiple',\n  'sendingMultiple',\n  'canceledMultiple',\n  'completeMultiple',\n  'processingMultiple',\n\n  'reset',\n  'queueComplete',\n  'totalUploadProgress'\n];\n\nexport interface DropzoneConfigInterface {\n  timeout?: number,\n\n  autoReset?: number,\n  errorReset?: number,\n  cancelReset?: number,\n\n  url?: string | DropzoneUrlFunction,\n  method?: string | DropzoneMethodFunction,\n\n  params?: any | DropzoneParamsFunction,\n  headers?: any | DropzoneHeadersFunction,\n\n  init?: DropzoneInitFunction,\n  accept?: DropzoneAcceptFunction,\n  resize?: DropzoneResizeFunction,\n  fallback?: DropzoneFallbackFunction,\n  renameFile?: DropzoneRenameFileFunction,\n  transformFile?: DropzoneTransformFileFunction,\n  chunksUploaded?: DropzoneChunksUploadedFunction,\n\n  withCredentials?: boolean,\n\n  previewsContainer?: any,\n  hiddenInputContainer?: any,\n\n  clickable?: string | string[] | boolean,\n  paramName?: any,\n  capture?: string,\n  maxFiles?: number,\n  maxFilesize?: number,\n  filesizeBase?: number,\n  acceptedFiles?: string,\n  forceFallback?: boolean,\n  addRemoveLinks?: boolean,\n  uploadMultiple?: boolean,\n  parallelUploads?: number,\n  resizeWidth?: number,\n  resizeHeight?: number,\n  resizeMethod?: string,\n  resizeQuality?: number,\n  resizeMimeType?: string,\n  thumbnailWidth?: number,\n  thumbnailHeight?: number,\n  thumbnailMethod?: string,\n  previewTemplate?: string,\n  autoQueue?: boolean,\n  autoProcessQueue?: boolean,\n  ignoreHiddenFiles?: boolean,\n  maxThumbnailFilesize?: number,\n  createImageThumbnails?: boolean,\n\n  chunking?: boolean,\n  chunkSize?: number,\n  retryChunks?: boolean,\n  forceChunking?: boolean,\n  retryChunksLimit?: number,\n  parallelChunkUploads?: boolean,\n\n  dictFileSizeUnits?: any,\n\n  dictDefaultMessage?: string,\n  dictFallbackMessage?: string,\n\n  dictFileTooBig?: string,\n  dictResponseError?: string,\n  dictInvalidFileType?: string,\n\n  dictRemoveFile?: string,\n  dictCancelUpload?: string,\n  dictFallbackText?: string,\n  dictMaxFilesExceeded?: string,\n  dictRemoveFileConfirmation?: string,\n  dictCancelUploadConfirmation?: string\n}\n\nexport class DropzoneConfig implements DropzoneConfigInterface {\n  timeout: number;\n\n  autoReset: number;\n  errorReset: number;\n  cancelReset: number;\n\n  url: string | DropzoneUrlFunction;\n  method: string | DropzoneMethodFunction;\n\n  params: any | DropzoneParamsFunction;\n  headers: any | DropzoneHeadersFunction;\n\n  init: DropzoneInitFunction;\n  accept: DropzoneAcceptFunction;\n  resize: DropzoneResizeFunction;\n  fallback: DropzoneFallbackFunction;\n  renameFile: DropzoneRenameFileFunction;\n  transformFile: DropzoneTransformFileFunction;\n  chunksUploaded: DropzoneChunksUploadedFunction;\n\n  withCredentials: boolean;\n\n  previewsContainer: any;\n  hiddenInputContainer: any;\n\n  clickable: string | string[] | boolean;\n  paramName: any;\n  capture: string;\n  maxFiles: number;\n  maxFilesize: number;\n  filesizeBase: number;\n  acceptedFiles: string;\n  forceFallback: boolean;\n  addRemoveLinks: boolean;\n  uploadMultiple: boolean;\n  parallelUploads: number;\n  resizeWidth: number;\n  resizeHeight: number;\n  resizeMethod: string;\n  resizeQuality: number;\n  resizeMimeType: string;\n  thumbnailWidth: number;\n  thumbnailHeight: number;\n  thumbnailMethod: string;\n  previewTemplate: string;\n  autoQueue: boolean;\n  autoProcessQueue: boolean;\n  ignoreHiddenFiles: boolean;\n  maxThumbnailFilesize: number;\n  createImageThumbnails: boolean;\n\n  chunking: boolean;\n  chunkSize: number;\n  retryChunks: boolean;\n  forceChunking: boolean;\n  retryChunksLimit: number;\n  parallelChunkUploads: boolean;\n\n  dictFileSizeUnits: any;\n\n  dictDefaultMessage: string;\n  dictFallbackMessage: string;\n\n  dictFileTooBig: string;\n  dictResponseError: string;\n  dictInvalidFileType: string;\n\n  dictRemoveFile: string;\n  dictCancelUpload: string;\n  dictFallbackText: string;\n  dictMaxFilesExceeded: string;\n  dictRemoveFileConfirmation: string;\n  dictCancelUploadConfirmation: string;\n\n  constructor(config: DropzoneConfigInterface = {}) {\n    this.assign(config);\n  }\n\n  assign(config: DropzoneConfigInterface | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n\nexport type DropzoneUrlFunction = (files: any) => string;\nexport type DropzoneMethodFunction = (files: any) => string;\n\nexport type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\nexport type DropzoneHeadersFunction = () => any;\n\nexport type DropzoneInitFunction = () => any;\nexport type DropzoneFallbackFunction = () => HTMLElement;\n\nexport type DropzoneAcceptFunction = (file: File, done: Function) => any;\nexport type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\nexport type DropzoneRenameFileFunction = (file: File) => string;\nexport type DropzoneTransformFileFunction = (file: File, done: Function) => any;\nexport type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;\n","import * as Dropzone from 'dropzone';\n\nimport { isPlatformBrowser } from '@angular/common';\nimport { PLATFORM_ID,\n  OnInit, DoCheck, OnChanges, OnDestroy,\n  Directive, Input, Output, EventEmitter,\n  NgZone, Renderer2, ElementRef, Optional, Inject,\n  SimpleChanges, KeyValueDiffer, KeyValueDiffers } from '@angular/core';\n\nimport { DROPZONE_CONFIG } from './dropzone.interfaces';\n\nimport { DropzoneEvents, DropzoneConfig, DropzoneConfigInterface } from './dropzone.interfaces';\n\n@Directive({\n  selector: '[dropzone]',\n  exportAs: 'ngxDropzone'\n})\nexport class DropzoneDirective implements OnInit, DoCheck, OnChanges, OnDestroy {\n  private instance: any;\n\n  private configDiff: KeyValueDiffer<string, any>;\n\n  @Input() disabled: boolean = false;\n\n  @Input('dropzone') config: DropzoneConfigInterface;\n\n  @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n  @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n  @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n  @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n  @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n  @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n\n  @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n  @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n  @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n  @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n  @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n  @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n\n  @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n  @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n  @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n  @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n  @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n  @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n\n  @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n  @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n  @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n  @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n  @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n\n  @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n  @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n  @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object, private zone: NgZone,\n    private renderer: Renderer2, private elementRef: ElementRef, private differs: KeyValueDiffers,\n    @Optional() @Inject(DROPZONE_CONFIG) private defaults: DropzoneConfigInterface)\n  {\n    const dz = Dropzone;\n\n    dz.autoDiscover = false;\n  }\n\n  ngOnInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const params = new DropzoneConfig(this.defaults);\n\n    params.assign(this.config); // Custom configuration\n\n    this.renderer.addClass(this.elementRef.nativeElement,\n      (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');\n\n    this.renderer.removeClass(this.elementRef.nativeElement,\n      (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');\n\n    this.zone.runOutsideAngular(() => {\n      this.instance = new Dropzone(this.elementRef.nativeElement, params);\n    });\n\n    if (this.disabled) {\n      this.instance.disable();\n    }\n\n    // Add auto reset handling for events\n    this.instance.on('success', (result) => {\n      if (params.autoReset != null) {\n        setTimeout(() => this.reset(), params.autoReset);\n      }\n    });\n\n    this.instance.on('error', (error) => {\n      if (params.errorReset != null) {\n        setTimeout(() => this.reset(), params.errorReset);\n      }\n    });\n\n    this.instance.on('canceled', (result) => {\n      if (params.cancelReset != null) {\n        setTimeout(() => this.reset(), params.cancelReset);\n      }\n    });\n\n    // Add native Dropzone event handling\n    DropzoneEvents.forEach((eventName) => {\n      this.instance.on(eventName.toLowerCase(), (...args) => {\n        args = (args.length === 1) ? args[0] : args;\n\n        if (this[`DZ_${eventName.toUpperCase()}`]) {\n          this.zone.run(() => {\n            this[`DZ_${eventName.toUpperCase()}`].emit(args);\n          });\n        }\n      });\n    });\n\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n\n      this.configDiff.diff(this.config || {});\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.disabled && this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes && this.instance) {\n        this.ngOnDestroy();\n\n        this.ngOnInit();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.destroy();\n      });\n\n      this.instance = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === false) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.enable();\n          });\n        } else if (changes['disabled'].currentValue === true) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.disable();\n          });\n        }\n      }\n    }\n  }\n\n  public dropzone(): any {\n    return this.instance;\n  }\n\n  public reset(cancel?: boolean) {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.removeAllFiles(cancel);\n      });\n    }\n  }\n}\n","import { Component, ViewEncapsulation,\n  Input, Output, ViewChild, EventEmitter } from '@angular/core';\n\nimport { DropzoneDirective } from './dropzone.directive';\nimport { DropzoneConfigInterface } from './dropzone.interfaces';\n\n@Component({\n  selector: 'dropzone',\n  exportAs: 'ngxDropzone',\n  templateUrl: './lib/dropzone.component.html',\n  styleUrls: [ './lib/dropzone.component.css' ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DropzoneComponent {\n  @Input() disabled: boolean = false;\n\n  @Input() config: DropzoneConfigInterface;\n\n  @Input() message: string = 'Click or drag files to upload';\n  @Input() placeholder: string = '';\n\n  @Input() useDropzoneClass: boolean = true;\n\n  @ViewChild(DropzoneDirective) directiveRef: DropzoneDirective;\n\n  @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n  @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n  @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n  @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n  @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n  @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n\n  @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n  @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n  @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n  @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n  @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n  @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n\n  @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n  @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n  @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n  @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n  @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n  @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n\n  @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n  @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n  @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n  @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n  @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n\n  @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n  @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n  @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n\n  constructor() {}\n\n  public getPlaceholder() {\n    return 'url(' + encodeURI(this.placeholder) + ')';\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { DropzoneComponent } from './dropzone.component';\nimport { DropzoneDirective } from './dropzone.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DropzoneComponent, DropzoneDirective],\n  exports: [CommonModule, DropzoneComponent, DropzoneDirective]\n})\nexport class DropzoneModule {\n}\n"],"names":["InjectionToken","EventEmitter","isPlatformBrowser","Directive","Inject","PLATFORM_ID","NgZone","Renderer2","ElementRef","KeyValueDiffers","Optional","Input","Output","Component","ViewEncapsulation","ViewChild","NgModule","CommonModule"],"mappings":"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"}