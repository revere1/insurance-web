/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as Dropzone from 'dropzone';
import { isPlatformBrowser } from '@angular/common';
import { PLATFORM_ID, Directive, Input, Output, EventEmitter, NgZone, Renderer2, ElementRef, Optional, Inject, KeyValueDiffers } from '@angular/core';
import { DROPZONE_CONFIG } from './dropzone.interfaces';
import { DropzoneEvents, DropzoneConfig } from './dropzone.interfaces';
var DropzoneDirective = /** @class */ (function () {
    function DropzoneDirective(platformId, zone, renderer, elementRef, differs, defaults) {
        this.platformId = platformId;
        this.zone = zone;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.differs = differs;
        this.defaults = defaults;
        this.disabled = false;
        this.DZ_ERROR = new EventEmitter();
        this.DZ_SUCCESS = new EventEmitter();
        this.DZ_SENDING = new EventEmitter();
        this.DZ_CANCELED = new EventEmitter();
        this.DZ_COMPLETE = new EventEmitter();
        this.DZ_PROCESSING = new EventEmitter();
        this.DZ_DROP = new EventEmitter();
        this.DZ_DRAGSTART = new EventEmitter();
        this.DZ_DRAGEND = new EventEmitter();
        this.DZ_DRAGENTER = new EventEmitter();
        this.DZ_DRAGOVER = new EventEmitter();
        this.DZ_DRAGLEAVE = new EventEmitter();
        this.DZ_THUMBNAIL = new EventEmitter();
        this.DZ_ADDEDFILE = new EventEmitter();
        this.DZ_REMOVEDFILE = new EventEmitter();
        this.DZ_UPLOADPROGRESS = new EventEmitter();
        this.DZ_MAXFILESREACHED = new EventEmitter();
        this.DZ_MAXFILESEXCEEDED = new EventEmitter();
        this.DZ_SUCCESSMULTIPLE = new EventEmitter();
        this.DZ_SENDINGMULTIPLE = new EventEmitter();
        this.DZ_CANCELEDMULTIPLE = new EventEmitter();
        this.DZ_COMPLETEMULTIPLE = new EventEmitter();
        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();
        this.DZ_RESET = new EventEmitter();
        this.DZ_QUEUECOMPLETE = new EventEmitter();
        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();
        var /** @type {?} */ dz = Dropzone;
        dz.autoDiscover = false;
    }
    /**
     * @return {?}
     */
    DropzoneDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        var /** @type {?} */ params = new DropzoneConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        this.renderer.addClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');
        this.renderer.removeClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');
        this.zone.runOutsideAngular(function () {
            _this.instance = new Dropzone(_this.elementRef.nativeElement, params);
        });
        if (this.disabled) {
            this.instance.disable();
        }
        // Add auto reset handling for events
        this.instance.on('success', function (result) {
            if (params.autoReset != null) {
                setTimeout(function () { return _this.reset(); }, params.autoReset);
            }
        });
        this.instance.on('error', function (error) {
            if (params.errorReset != null) {
                setTimeout(function () { return _this.reset(); }, params.errorReset);
            }
        });
        this.instance.on('canceled', function (result) {
            if (params.cancelReset != null) {
                setTimeout(function () { return _this.reset(); }, params.cancelReset);
            }
        });
        // Add native Dropzone event handling
        DropzoneEvents.forEach(function (eventName) {
            _this.instance.on(eventName.toLowerCase(), function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                args = (args.length === 1) ? args[0] : args;
                if (_this["DZ_" + eventName.toUpperCase()]) {
                    _this.zone.run(function () {
                        _this["DZ_" + eventName.toUpperCase()].emit(args);
                    });
                }
            });
        });
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    /**
     * @return {?}
     */
    DropzoneDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.disabled && this.configDiff) {
            var /** @type {?} */ changes = this.configDiff.diff(this.config || {});
            if (changes && this.instance) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    /**
     * @return {?}
     */
    DropzoneDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.instance) {
            this.zone.runOutsideAngular(function () {
                _this.instance.destroy();
            });
            this.instance = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DropzoneDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === false) {
                    this.zone.runOutsideAngular(function () {
                        _this.instance.enable();
                    });
                }
                else if (changes['disabled'].currentValue === true) {
                    this.zone.runOutsideAngular(function () {
                        _this.instance.disable();
                    });
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DropzoneDirective.prototype.dropzone = /**
     * @return {?}
     */
    function () {
        return this.instance;
    };
    /**
     * @param {?=} cancel
     * @return {?}
     */
    DropzoneDirective.prototype.reset = /**
     * @param {?=} cancel
     * @return {?}
     */
    function (cancel) {
        var _this = this;
        if (this.instance) {
            this.zone.runOutsideAngular(function () {
                _this.instance.removeAllFiles(cancel);
            });
        }
    };
    DropzoneDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dropzone]',
                    exportAs: 'ngxDropzone'
                },] },
    ];
    /** @nocollapse */
    DropzoneDirective.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
        { type: NgZone, },
        { type: Renderer2, },
        { type: ElementRef, },
        { type: KeyValueDiffers, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DROPZONE_CONFIG,] },] },
    ]; };
    DropzoneDirective.propDecorators = {
        "disabled": [{ type: Input },],
        "config": [{ type: Input, args: ['dropzone',] },],
        "DZ_ERROR": [{ type: Output, args: ['error',] },],
        "DZ_SUCCESS": [{ type: Output, args: ['success',] },],
        "DZ_SENDING": [{ type: Output, args: ['sending',] },],
        "DZ_CANCELED": [{ type: Output, args: ['canceled',] },],
        "DZ_COMPLETE": [{ type: Output, args: ['complete',] },],
        "DZ_PROCESSING": [{ type: Output, args: ['processing',] },],
        "DZ_DROP": [{ type: Output, args: ['drop',] },],
        "DZ_DRAGSTART": [{ type: Output, args: ['dragStart',] },],
        "DZ_DRAGEND": [{ type: Output, args: ['dragEnd',] },],
        "DZ_DRAGENTER": [{ type: Output, args: ['dragEnter',] },],
        "DZ_DRAGOVER": [{ type: Output, args: ['dragOver',] },],
        "DZ_DRAGLEAVE": [{ type: Output, args: ['dragLeave',] },],
        "DZ_THUMBNAIL": [{ type: Output, args: ['thumbnail',] },],
        "DZ_ADDEDFILE": [{ type: Output, args: ['addedFile',] },],
        "DZ_REMOVEDFILE": [{ type: Output, args: ['removedFile',] },],
        "DZ_UPLOADPROGRESS": [{ type: Output, args: ['uploadProgress',] },],
        "DZ_MAXFILESREACHED": [{ type: Output, args: ['maxFilesReached',] },],
        "DZ_MAXFILESEXCEEDED": [{ type: Output, args: ['maxFilesExceeded',] },],
        "DZ_SUCCESSMULTIPLE": [{ type: Output, args: ['successMultiple',] },],
        "DZ_SENDINGMULTIPLE": [{ type: Output, args: ['sendingMultiple',] },],
        "DZ_CANCELEDMULTIPLE": [{ type: Output, args: ['canceledMultiple',] },],
        "DZ_COMPLETEMULTIPLE": [{ type: Output, args: ['completeMultiple',] },],
        "DZ_PROCESSINGMULTIPLE": [{ type: Output, args: ['processingMultiple',] },],
        "DZ_RESET": [{ type: Output, args: ['reset',] },],
        "DZ_QUEUECOMPLETE": [{ type: Output, args: ['queueComplete',] },],
        "DZ_TOTALUPLOADPROGRESS": [{ type: Output, args: ['totalUploadProgress',] },],
    };
    return DropzoneDirective;
}());
export { DropzoneDirective };
function DropzoneDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DropzoneDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DropzoneDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DropzoneDirective.propDecorators;
    /** @type {?} */
    DropzoneDirective.prototype.instance;
    /** @type {?} */
    DropzoneDirective.prototype.configDiff;
    /** @type {?} */
    DropzoneDirective.prototype.disabled;
    /** @type {?} */
    DropzoneDirective.prototype.config;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_ERROR;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_SUCCESS;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_SENDING;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_CANCELED;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_COMPLETE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_PROCESSING;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DROP;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DRAGSTART;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DRAGEND;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DRAGENTER;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DRAGOVER;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_DRAGLEAVE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_THUMBNAIL;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_ADDEDFILE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_REMOVEDFILE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_UPLOADPROGRESS;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_MAXFILESREACHED;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_MAXFILESEXCEEDED;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_SUCCESSMULTIPLE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_SENDINGMULTIPLE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_CANCELEDMULTIPLE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_COMPLETEMULTIPLE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_PROCESSINGMULTIPLE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_RESET;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_QUEUECOMPLETE;
    /** @type {?} */
    DropzoneDirective.prototype.DZ_TOTALUPLOADPROGRESS;
    /** @type {?} */
    DropzoneDirective.prototype.platformId;
    /** @type {?} */
    DropzoneDirective.prototype.zone;
    /** @type {?} */
    DropzoneDirective.prototype.renderer;
    /** @type {?} */
    DropzoneDirective.prototype.elementRef;
    /** @type {?} */
    DropzoneDirective.prototype.differs;
    /** @type {?} */
    DropzoneDirective.prototype.defaults;
}
//# sourceMappingURL=dropzone.directive.js.map